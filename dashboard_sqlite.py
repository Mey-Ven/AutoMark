"""
Application Streamlit pour le syst√®me de gestion de pr√©sence AutoMark.
Version corrig√©e qui n'utilise que les modules existants.
"""

import streamlit as st
import pandas as pd
import os
import sys
from datetime import datetime

# Ajouter le r√©pertoire src au chemin Python
sys.path.append(os.path.abspath("."))

# Importer les modules n√©cessaires
from src.dashboard.pages.home import render_home_page
from src.dashboard.pages.admin_sqlite import render_admin_page  # Interface d'administration pour SQLite
from src.dashboard.pages.face_recognition import render_face_recognition_page
from src.dashboard.pages.reports import render_reports_page
# Utiliser les modules existants pour les pages √©tudiant et enseignant
from src.dashboard.pages.student_home import render_student_home
from src.dashboard.pages.teacher_home import render_teacher_home
from src.dashboard.utils.db_data_loader import DBDataLoader
from src.dashboard.utils.auth_sqlite import authenticate, is_authenticated, get_user_role, logout

# Initialiser le chargeur de donn√©es
data_loader = DBDataLoader("data")

# Configurer la page Streamlit
st.set_page_config(
    page_title="AutoMark - Syst√®me de Gestion de Pr√©sence",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fonction principale
def main():
    # V√©rifier si l'utilisateur est authentifi√©
    if not is_authenticated():
        # Afficher le formulaire de connexion
        with st.form("login_form"):
            st.title("Connexion")
            username = st.text_input("Nom d'utilisateur")
            password = st.text_input("Mot de passe", type="password")
            submitted = st.form_submit_button("Se connecter")

            if submitted:
                if authenticate(username, password):
                    st.success(f"Connexion r√©ussie en tant que {username}")
                    st.rerun()
                else:
                    st.error("Nom d'utilisateur ou mot de passe incorrect")
    else:
        # Afficher la barre lat√©rale
        with st.sidebar:
            st.title("AutoMark")
            st.write(f"Connect√© en tant que: **{st.session_state.username}**")

            # Obtenir le r√¥le de l'utilisateur
            user_role = get_user_role(st.session_state.username)

            # Afficher les options de navigation en fonction du r√¥le
            if user_role == "admin":
                page = st.radio("Navigation", ["Accueil", "Administration", "Reconnaissance Faciale", "Rapports"])
            elif user_role == "teacher":
                page = st.radio("Navigation", ["Accueil", "Enseignant", "Reconnaissance Faciale", "Rapports"])
            else:  # student
                page = st.radio("Navigation", ["Accueil", "√âtudiant"])

            # Bouton de d√©connexion
            if st.button("D√©connexion"):
                logout()
                st.rerun()

        # Afficher la page s√©lectionn√©e
        if page == "Accueil":
            render_home_page(data_loader)
        elif page == "Administration" and user_role == "admin":
            render_admin_page(data_loader)
        elif page == "Enseignant" and user_role == "teacher":
            render_teacher_home(data_loader)  # Utiliser render_teacher_home au lieu de render_teacher_page
        elif page == "√âtudiant" and user_role == "student":
            render_student_home(data_loader)  # Utiliser render_student_home au lieu de render_student_page
        elif page == "Reconnaissance Faciale" and (user_role == "admin" or user_role == "teacher"):
            render_face_recognition_page(data_loader)
        elif page == "Rapports" and (user_role == "admin" or user_role == "teacher"):
            render_reports_page(data_loader)

# Ex√©cuter l'application
if __name__ == "__main__":
    main()
